syntax = "proto3";

package chat;

// Main chat service definition
service ChatService {
    // Account management
    rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse);
    rpc Authenticate (AuthRequest) returns (AuthResponse);
    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse);
    rpc DeleteAccount (DeleteAccountRequest) returns (DeleteAccountResponse);
    
    // Messaging
    rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
    rpc GetMessages (GetMessagesRequest) returns (GetMessagesResponse);
    rpc MarkRead (MarkReadRequest) returns (MarkReadResponse);
    rpc DeleteMessages (DeleteMessagesRequest) returns (DeleteMessagesResponse);
    rpc GetUnreadCount (UnreadCountRequest) returns (UnreadCountResponse);
}

// Account management messages
message CreateAccountRequest {
    string username = 1;
    string password_hash = 2;
}

message CreateAccountResponse {
    bool success = 1;
    string error_message = 2;
}

message AuthRequest {
    string username = 1;
    string password_hash = 2;
}

message AuthResponse {
    bool success = 1;
    string error_message = 2;
}

message ListAccountsRequest {
    string pattern = 1;  // Search pattern, "*" for all
}

message ListAccountsResponse {
    repeated string usernames = 1;
    string error_message = 2;
}

message DeleteAccountRequest {
    string username = 1;
    string password_hash = 2;
}

message DeleteAccountResponse {
    bool success = 1;
    string error_message = 2;
}

// Messaging messages
message Message {
    uint32 id = 1;
    string sender = 2;
    string content = 3;
    uint64 timestamp = 4;
    bool is_read = 5;
}

message SendMessageRequest {
    string recipient = 1;
    string content = 2;
}

message SendMessageResponse {
    uint32 message_id = 1;
    string error_message = 2;
}

message GetMessagesRequest {
    bool include_read = 1;
}

message GetMessagesResponse {
    repeated Message messages = 1;
    string error_message = 2;
}

message MarkReadRequest {
    repeated uint32 message_ids = 1;
}

message MarkReadResponse {
    uint32 marked_count = 1;
    string error_message = 2;
}

message DeleteMessagesRequest {
    repeated uint32 message_ids = 1;
}

message DeleteMessagesResponse {
    uint32 deleted_count = 1;
    string error_message = 2;
}

message UnreadCountRequest {}

message UnreadCountResponse {
    uint32 count = 1;
    string error_message = 2;
} 